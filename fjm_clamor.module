<?php

function fjm_clamor_menu() {
  return array(
    'fjm_clamor/movement' => array(
      'page callback' => 'fjm_clamor_movement',
      'file' => 'displays/atm-concert.inc',
      'access arguments' => array('ingest new fedora objects'),
      'type' => MENU_CALLBACK,
    ),
    'fjm_clamor/score_autocomplete' => array(
      'page callback' => 'fjm_clamor_score_autocomplete',
      'file' => 'displays/atm-concert.inc',
      'access arguments' => array('ingest new fedora objects'),
      'type' => MENU_CALLBACK,
    ),
    'fjm_clamor/composer_autocomplete' => array(
      'page callback' => 'fjm_clamor_composer_autocomplete',
      'file' => 'displays/atm-score-collection.inc',
      'access arguments' => array('ingest new fedora objects'),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implementation of hook_islandora_tabs().
 * @param $cmodels array
 *   An array of ContentModel objects
 * @param $pid string
 *   A string containing the pid of the object to render.
 * @param $page_number integer
 *   @deprecated
 *   An integer for the page to display.
 * @return array
 *   An array of tabpages to inject into the Islandora display.
 */
function fjm_clamor_islandora_tabs($islandora_cmodels, $pid, $page_number) {
  $to_return = array();
  
  $model_query = <<<END_QUERY
PREFIX fm: <info:fedora/fedora-system:def/model#>
SELECT ?model
WHERE {
  <info:fedora/$pid> fm:hasModel ?model ;
                     fm:state fm:Active .
}
END_QUERY;
  $all_cmodels = ObjectHelper::performSparqlQuery($model_query);

  foreach ($all_cmodels as $cmodel) {
    $cm_pid = $cmodel['model'];
    switch($cm_pid) {
      case 'atm:cycleCollectionCModel':
        module_load_include('inc', 'fjm_clamor', 'displays/atm-cycle-collection');
        $to_return += CycleCollectionDisplay::addTabsStatically($pid, $page_number);
        break;
      case 'atm:concertCycleCModel':
        module_load_include('inc', 'fjm_clamor', 'displays/atm-concert-collection');
        $to_return += ConcertCollectionDisplay::addTabsStatically($pid, $page_number);
        break;
      case 'atm:concertCModel':
        module_load_include('inc', 'fjm_clamor', 'displays/atm-concert');
        $to_return += ConcertDisplay::addTabsStatically($pid, $page_number);
        break;
      case 'atm:personCollectionCModel':
        module_load_include('inc', 'fjm_clamor', 'displays/atm-person-collection');
        $to_return += PersonCollectionDisplay::addTabsStatically($pid, $page_number);
        break;
      case 'atm:scoreCollectionCModel':
        module_load_include('inc', 'fjm_clamor', 'displays/atm-score-collection');
        $to_return += ScoreCollectionDisplay::addTabsStatically($pid, $page_number);
        break;
      case 'atm:personCModel':
        module_load_include('inc', 'fjm_clamor', 'displays/atm-person');
        $to_return += PersonDisplay::addTabsStatically($pid, $page_number);
        break;
      case 'atm:programCModel':
        module_load_include('inc', 'fjm_clamor', 'displays/atm-program');
        $to_return += ProgramDisplay::addTabsStatically($pid, $page_number);
        break;
      case 'atm:scoreCModel':
        module_load_include('inc', 'fjm_clamor', 'displays/atm-score');
        $to_return += ScoreDisplay::addTabsStatically($pid, $page_number);
        break;
    }
  }
  
  return $to_return;
}

/**
 * Implementation of hook_required_fedora_objects().
 */
function fjm_clamor_required_fedora_objects() {
  $mod_path = drupal_get_path('module', 'fjm_clamor') . '/fedora_objects';
  return array(
    'fjm_clamor' => array(
      'module' => 'fjm_clamor',
      'title' => t('Clamor Fedora Objects'),
      'objects' => array(
        array(
          'pid' => 'atm:concertCollectionCModel',
          'label' => 'Concert Collection Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
          'datastreams' => array(
            array(
              'dsid' => 'ISLANDORACM',
              'label' => 'Islandora content model',
              'datastream_file' => "./$mod_path/cmodels/concert_collection/ISLANDORACM.xml",
              'dsversion' => TRUE,
            ),
          ),
        ),
        array(
          'pid' => 'atm:concertCollection',
          'label' => 'Concert Collection',
          'cmodel' => 'info:fedora/atm:concertCollectionCModel',
          'parent' => 'info:fedora/atm:top',
        ),
        array(
          'pid' => 'atm:personCollectionCModel',
          'label' => 'Person Collection Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
          'datastreams' => array(
            array(
              'dsid' => 'ISLANDORACM',
              'label' => 'Islandora content model',
              'datastream_file' => "./$mod_path/cmodels/person_collection/ISLANDORACM.xml",
              'dsversion' => TRUE,
            ),
          ),
        ),
        array(
          'pid' => 'atm:personCollection',
          'label' => 'Person Collection',
          'cmodel' => 'info:fedora/atm:personCollectionCModel',
          'parent' => 'info:fedora/atm:top',
        ),
        array(
          'pid' => 'atm:concertCModel',
          'label' => 'Concert Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
          'datastreams' => array(
            array(
              'dsid' => 'ISLANDORACM',
              'label' => 'Islandora content model',
              'datastream_file' => "./$mod_path/cmodels/concert/ISLANDORACM.xml",
              'dsversion' => TRUE,
            ),
          ),
        ),
        array(
          'pid' => 'atm:groupCModel',
          'label' => 'Group Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
        ),
        array(
          'pid' => 'atm:imageCModel',
          'label' => 'Image Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
        ),
        array(
          'pid' => 'atm:instrumentCModel',
          'label' => 'Instrument Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
        ),
        array(
          'pid' => 'atm:instrumentClassCModel',
          'label' => 'Instrument Class Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
        ),
        array(
          'pid' => 'atm:lectureCModel',
          'label' => 'Lecture Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
        ),
        array(
          'pid' => 'atm:movementCModel',
          'label' => 'Movement Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
        ),
        array(
          'pid' => 'atm:performanceCModel',
          'label' => 'Performance Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
        ),
        array(
          'pid' => 'atm:personCModel',
          'label' => 'Person Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
          'datastreams' => array(
            array(
              'dsid' => 'ISLANDORACM',
              'label' => 'Islandora content model',
              'datastream_file' => "./$mod_path/cmodels/person/ISLANDORACM.xml",
              'dsversion' => TRUE,
            ),
          ),
        ),
        array(
          'pid' => 'atm:programCModel',
          'label' => 'Concert Program Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
          'datastreams' => array(
            array(
              'dsid' => 'ISLANDORACM',
              'label' => 'Islandora content model',
              'datastream_file' => "./$mod_path/cmodels/program/ISLANDORACM.xml",
              'dsversion' => TRUE,
            ),
          ),
        ),
        array(
          'pid' => 'atm:scoreCModel',
          'label' => 'Score Content Model',
          'cmodel' => 'info:fedora/fedora-system:ContentModel-3.0',
          'parent' => 'info:fedora/islandora:ContentModelsCollection',
          'datastreams' => array(
            array(
              'dsid' => 'ISLANDORACM',
              'label' => 'Islandora content model',
              'datastream_file' => "./$mod_path/cmodels/score/ISLANDORACM.xml",
              'dsversion' => TRUE,
            ),
          ),
        ),
      ),
    )
  );
}


/**
 * Implementation of hook_islandora_solr_primary_display().
 */
function fjm_clamor_islandora_solr_primary_display() {
  return array(
    'fjm_clamor' => array(
      'name' => t('Clamor display'),
      'module' => 'fjm_clamor',
      'file' => 'includes/SolrResults.inc',
      'class' => "SolrResults",
      'function' => "displayFJMResults",
      'description' => t("Change display based on type."),
    ),
  );
}

/**
 * Implementation of hook_theme().
 */
function fjm_clamor_theme() {
  return array(
    'fjm_clamor_draggable_table' => array(
      'file' => 'displays/atm-concert.inc',
    ),
    'fjm_clamor_solr_result' => array(
        'arguments' => array(
            'item' => NULL
        ),
        'template' => 'templates/fjm-clamor-solr-result'
    ),
    'fjm_clamor_concert' => array(
        'arguments' => array(
            'pid' => NULL,
            'pagenumber' => NULL,
            'concert' => NULL,
        ),
        'template' => 'templates/fjm-clamor-concert'
    ),
    'fjm_clamor_score' => array(
        'arguments' => array(
            'pid' => NULL,
            'pagenumber' => 1,
            'title' => t('unknown'),
            'composer' => t('unknown'),
            'abstract' => t('No abstract'),
            'notes' => array()

        ),
        'template' => 'templates/fjm-clamor-score'
    ),
    'fjm_clamor_flexpaper' => array(
        'arguments' => array(
            'pid' => NULL,
            'dsid' => 'SWF',
            'pagenumber' => 1,
            'flexpaper_path' => '/' . drupal_get_path('module', 'fjm_clamor') . '/lib/flexpaper',
            'flexpaper_config' => array(
                'Scale' => 0.6,
                'ZoomTransition' => 'easeOut',
                'ZoomTime' => 0.5,
                'ZoomInterval' => 0.1,
                'FitPageOnLoad' => FALSE,
                'FitWidthOnLoad' => TRUE,
                'PrintEnabled' => FALSE,
                'FullScreenAsMaxWindow' => TRUE,
                'ProgressiveLoading' => TRUE,
                'MinZoomSize' => 0.2,
                'MaxZoomSize' => 5,
                'SearchMatchAll' => FALSE,
                'InitViewMode' => 'Portrait',
                'ViewModeToolsVisible' => TRUE,
                'ZoomToolsVisible' => TRUE,
                'NavToolsVisible' => TRUE,
                'CursorToolsVisible' => TRUE,
                'SearchToolsVisible' => TRUE,
                'localeChain' => 'en_US'
            )
        ),
        'template' => 'templates/fjm-clamor-flexpaper'
    ),
    'fjm_clamor_program' => array(
        'arguments' => array(
            'pid' => NULL,
            'dsid' => 'SWF',
            'pagenumber' => 1,
            'concert' => array(),
            'toc' => NULL,
            'notes' => array()
        ),
        'template' => 'templates/fjm-clamor-program'
    ),
    'fjm_clamor_person' => array(
        'arguments' => array(
            'pid' => NULL,
            'name' => array(
                'first' => t('unknown'),
                'last' => t('unknown')
            ),
            'date' => array(
                'birth' => NULL,
                'death' => NULL
            ),
            'biography' => t('No biography'),
            'default_image' => url("fedora/repository/atm:defaultPersonImage"),
            'performances' => array(),
            'performance_headers' => array("empty")
        ),
        'template' => 'templates/fjm-clamor-person'
    ),
    'fjm_clamor_imagegallery' => array(
        'arguments' => array(
            'pid' => NULL,
            'attributes' => array(
                'class' => 'image_strip_group'
            ),
            'images' => array()
        ),
        'template' => 'templates/fjm-clamor-imagegallery'
    ),
    'fjm_clamor_flowplayer' => array(
        'arguments' => array(
            'selector' => 'ol.atm_clips',
            'base' => '/' . drupal_get_path("module", "fjm_clamor") . '/lib/flowplayer',
        ),
        'template' => 'templates/fjm-clamor-player'
    ),
    'fjm_clamor_now_playing' => array(
        'arguments' => array(
            'piece' => NULL,
            'players' => NULL
        ),
        'template' => 'templates/fjm-clamor-now-playing'
    ),
  );
}

/**
 * Implementation of hook_preprocess_fjm_clamor_flowplayer().
 */
function template_preprocess_fjm_clamor_flowplayer(&$vars) {
  $mod_base = drupal_get_path('module', 'fjm_clamor');

  drupal_add_js("$mod_base/lib/flowplayer/flowplayer-3.2.6.min.js", 'module');
  drupal_add_js("$mod_base/lib/flowplayer/flowplayer.playlist-3.0.8.js", 'module'); 
  drupal_add_css("$mod_base/css/fjm-clamor-player.css", 'module'); 
}

/**
 * Implementation of hook_preprocess_fjm_clamor_solr_result().
 */
function template_preprocess_fjm_clamor_solr_result(&$vars) {
    $result = $vars['item'];

    $toReturn = array();
    
    $type = $result->atm_type_ms;
    $type = (array)$type;
    if (count($type) > 1 && array_search($fq_type, $type) !== FALSE) {
      $type = $fq_type;
    }
    elseif (count($type) === 1) {
      $type = $type[0];
    }
    else {
      $type = 'No type!?';
    }
    switch ($type) {
    case "Composer":
    case "Compositores":
            $toReturn['icon'] = "fedora/repository/{$result->atm_composer_icon_s}/TN";
            $toReturn['icon_image'] = theme('image', $toReturn['icon'], '', '', '', FALSE);
            $toReturn['name'] = $result->atm_composer_name_s;
            $toReturn['name_link'] = l($result->atm_composer_name_s, "fedora/repository/{$result->PID}");
    break;
    case "Concert":
    case "Conciertos":
            $toReturn = array_merge($toReturn, 
                array(
                    'title' => $result->atm_concert_title_s,
                    'cycle' => $result->atm_concert_cycle_s,
                    'date' => $result->atm_concert_date_dt,
                    'icon' => $result->atm_concert_iconpid_s,
                    'program' => array(
                        'pdf' => $result->atm_concert_program_pdf_b,
                        'titn' => $result->atm_concert_program_titn_s
                    ),
                    'digital_objects' => (is_array($result->atm_digital_objects_ms)?
                        array_unique($result->atm_digital_objects_ms):
                        (isset($result->atm_digital_objects_ms)?
                            array($result->atm_digital_objects_ms):
                        NULL)
                    ),
                    'accordion' => array(
                        t('Composers') => (is_array($result->atm_concert_composer_ms)?
                            (array_unique($result->atm_concert_composer_ms)):
                            (isset($result->atm_concert_composer_ms)?
                                array($result->atm_concert_composer_ms):
                                (NULL))),
                        t('Performers') => (is_array($result->atm_concert_player_ms)?
                            (array_unique($result->atm_concert_player_ms)):
                            (isset($result->atm_concert_player_ms)?
                                array($result->atm_concert_player_ms):
                                (NULL)))
                    ), 
                    'date' => new DateTime($result->atm_concert_date_dt)
            )
        );
            //FIXME: Generating stuff here seems kinda bad...
    break;
    case "Performance":
    case "Obras":
            $toReturn['piece'] = $result->atm_performance_piece_title_s;
            $toReturn['composer'] = l($result->atm_performance_composer_name_s, "fedora/repository/$result->atm_performance_composer_pid_s");
            //FIXME (minor):  If the perfomance is somehow part of multiple entities/concerts,
            //	this could break.
            $toReturn['concertPid'] = $result->rels_isMemberOf_ms;
            $toReturn['concert'] = l($result->atm_performance_concert_name_s, "fedora/repository/$result->rels_isMemberOf_ms");
            $toReturn['year'] = $result->atm_performance_year_s;
            $toReturn['concert_path'] = "fedora/repository/$result->rels_isMemberOf_ms/-/-/$result->rels_concertOrder_ms";
            $toReturn['cycle'] = $result->atm_performance_concert_cycle_s;
            $toReturn['audio'] = array();
            if ($result->atm_performance_mp3_b) {
                $toReturn['audio'] = array($result->PID);
            }
            else {
                $aud = $result->atm_performance_movement_ms;
                $mov = $result->atm_performance_movement_name_ms;
                $toReturn['audio'] = (array)$aud;
                $toReturn['movement'] = (array)$mov;
            }
            $players = (array)$result->atm_performance_player_ms;
            $instrument = (array)$result->atm_performance_inst_ms;
            for ($i = 0; $i < count($players); $i++) {
              $toReturn['players'][$players[$i]][] = $instrument[$i];
            }
            $toReturn['score'] = $result->rels_basedOn_ms;
            $toReturn['score_link'] = $result->atm_performance_score_pdf_b ? l('Score', "fedora/repository/". islandora_fjm_get_pid_from_array($toReturn['score']), array('attributes' => array('class' => 'pdf', 'target' => '_blank'))): t('N/A');
    break;
    case "Lecture":
    case "Archivo de voz":
            $toReturn['description'] = $result->atm_lecture_title_s;
            $toReturn['concert'] = l($result->atm_lecture_concert_title_s, 'fedora/repository/' . islandora_fjm_get_pid_from_array((array)$result->rels_isMemberOf_ms));
            $toReturn['year'] = $result->atm_facet_year_s;
            $toReturn['cycle'] = $result->atm_lecture_concert_cycle_s;
            $toReturn['audio'] = array($result->PID);
    break;
    case "Performer":
    case "Intérpretes":
            $toReturn['name'] = t('@first @last', array(
                '@first' => $result->eaccpf_name_forename_es,
                '@last' => $result->eaccpf_name_surname_es
            ));
            $toReturn['instrument'] = $result->atm_facet_instrument_s;
            $toReturn['group'] = implode(', ', (array)$result->atm_facet_group_ms);
            $toReturn['concert'] = l($result->atm_facet_concert_title_s, "fedora/repository/$result->atm_performer_concert_pid_s");
            $toReturn['concert_path'] = "fedora/repository/$result->atm_performer_concert_pid_s/-/-/$result->atm_performer_concert_order_s";
            $toReturn['cycle'] = $result->atm_facet_concert_cycle_s;
            $toReturn['piece'] = $result->atm_facet_piece_s;
            $toReturn['year'] = $result->atm_facet_year_s;
    break;
    case "Program":
    case "Programas de mano":
            $toReturn['concert'] = l($result->atm_program_concert_title_s, "fedora/repository/$result->rels_isMemberOf_ms");
            $toReturn['year'] = $result->atm_program_year_s;
            //FIXME (minor):  concert cycle does not need to be multivalued...
            $toReturn['cycle'] = $result->atm_program_concert_cycle_ms;
            $toReturn['titn'] = $result->atm_program_titn_s;
            $toReturn['titn_link'] = l(t('Go'), islandora_fjm_get_titn_addr($toReturn['titn']));
            //FIXME (minor): Index should not contain multiple copies of the same author, so this 'array_unique' should not be necessary
            $toReturn['author'] = array_unique((array)$result->atm_program_author_ms);
            $toReturn['PDF_link'] = l(t('PDF'), "fedora/repository/$result->PID", array('attributes' => array('class' => 'pdf', 'target' => '_blank')));
    break;
    case "Score":
    case "Partituras":
            $toReturn['composer'] = l($result->atm_score_composer_s, "fedora/repository/$result->atm_score_composer_pid_s");
            $toReturn['title'] = $result->atm_score_title_s;
            $toReturn['titn'] = $result->atm_score_titn_s;
            $toReturn['titn_link'] = ($toReturn['titn'] > 0)?l(t('Go'), islandora_fjm_get_titn_addr($toReturn['titn'])): 
                /**
                 * @todo REMOVEME: Field to be left blank without link...
                 * (http://support.discoverygarden.ca/attachments/download/480/CLAMOR_site_feedback.docx)
                 * //t('N/A')
                 */ 
                "";
            $toReturn['pdf'] = $result->atm_score_pdf_b;
            $toReturn['PDF_link'] = ($toReturn['pdf'])? l(t('PDF'), "fedora/repository/$result->PID", array('attributes' => array('class' => 'pdf', 'target' => '_blank'))) : 
                /**
                 * @todo REMOVEME: Field to be left blank without link... 
                 * (http://support.discoverygarden.ca/attachments/download/480/CLAMOR_site_feedback.docx) 
                 * //t('N/A')
                 */ 
                "";
    break;
    default:
            $toReturn[] = "Unknown type!";
    }

    $toReturn['type'] = $type;
    $toReturn['PID'] = $result->PID;

    $vars['item'] = $toReturn;
}

function _fjm_clamor_map_movements($pid, $name, $mp3) {
  return array(
    'pid'=> $pid,
    'name' => $name,
    'hasMP3' => $mp3,
  );
}

/**
 * @todo Complete...
 * @param array $vars 
 */
function template_preprocess_fjm_clamor_concert(&$vars) {
  global $base_url;
  $pid = $vars['pid'];
  //$concert = array();
  
  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrQueryProcessor');
  $qp = new IslandoraSolrQueryProcessor();
  
  $qp->solrParams = array(
    'fl' => array(
      "PID",
      "atm_concert_title_s",
      "atm_concert_cycle_s",
      "atm_concert_date_dt",
      "atm_concert_description_s",
      "atm_concert_program_pdf_pid_s",
      "atm_concert_program_titn_s",
    ),
  );
  
  $qp->buildAndExecuteQuery("PID:\"$pid\"");
  
  $concertResults = new stdClass();
  if (count($qp->solrResult->response->docs) > 0) {
    $concertResults = $qp->solrResult->response->docs[0];
    $qp->solrResult->response->docs = array();
  }
  
  $qp->solrParams = array(
    'sort' => 'atm_performance_order_i asc',
    'fq' => array(
      'atm_type_s:"Obras"',
      "rels_isMemberOf_ms:\"$pid\""
    )
  );
  $qp->buildAndExecuteQuery("*:*");
  
  $perf_results = array();
  if (count($qp->solrResult->response->docs) > 0) {
    $perf_results = $qp->solrResult->response->docs;
    $qp->solrResult->response->docs = array();
  }

  $concert = array(
    'title' => $concertResults->atm_concert_title_s,
    'cycle' => $concertResults->atm_concert_cycle_s,
    'date' => new DateTime($concertResults->atm_concert_date_dt),
    'description' => $concertResults->atm_concert_description_s,
    'performance' => array(),
    'performance_rows' => array(),
    'lecture' => array(),
    'lecture_rows' => array(),
    'program' => array(
      'pid' => $concertResults->atm_concert_program_pdf_pid_s,
      'titn' => $concertResults->atm_concert_program_titn_s,
    )
  );
  
  $js_data = array('islandora_fjm' => array('piece' => array(), 'lecture' => array()));
  foreach($perf_results as $doc) {
    $performance = array(
        'pid' => $doc->PID,
        'piece' => $doc->atm_performance_piece_title_s,
        'composer' => array(
          'pid' => $doc->atm_performance_composer_pid_s,
          'name'=> $doc->atm_performance_composer_name_s
        ),
        'localpdf' => ($doc->atm_performance_score_pdf_b === TRUE),
        'localpdfscore' => islandora_fjm_get_pid_from_array((array)$doc->rels_basedOn_ms),
        'score_titn' => $doc->atm_performance_score_titn_s,
        'order' => $doc->rels_concertOrder_ms,
        'mp3stat' => ($doc->atm_performance_mp3_b === TRUE),
        'movements' => array_map('_fjm_clamor_map_movements', 
          (array)$doc->atm_performance_movement_ms,
          (array)$doc->atm_performance_movement_name_ms,
          (array)$doc->atm_performance_movement_mp3_ms
        ),
    );
    
    $players = (array)$doc->atm_performance_player_ms;
    $instrument = (array)$doc->atm_performance_inst_ms;
    //FIXME:  There might/could be trouble here if a person plays more than one instrument.
    foreach ($players as $idx => $player) {
      $performance['players'][$player][] = $instrument[$idx];
    }
    
    $performance['rows'] = array(
      array(
        array(
          'data' => $performance['piece'],
          'colspan' => '2',
          'class' => 'atm_piecename'
        ),
        array(
          'data' => l($performance['composer']['name'], "fedora/repository/" . $performance['composer']['pid'])
        ),
        array(
          'data' => (
            ($performance['localpdf'])?
            (l(t("PDF"), "fedora/repository/" . $performance['localpdfscore'], array('attributes' => array('class' => 'pdf', 'target' => '_blank')))):
            (t("N/A"))) //TODO (minor): Don't know if they want this column populated if there's none.
        ),
        array(
          'data'=> (
            (!empty($performance['score_titn']))?
            (l(t("Go"), islandora_fjm_get_titn_addr($performance['score_titn']), array('attributes' => array('target' => '_blank')))):
            (t("N/A")) //TODO (minor): Don't know if they want this column populated if there's none.
          )
        ),
        array(
          'data' => (
            ($performance['mp3stat'])?
            ('
                <div class="atm_track concertOrder_' . $performance['order'] . '">
                    <a onClick="Drupal.settings.islandora_fjm.play(&quot;piece&quot;, ' . count($js_data['islandora_fjm']['piece']) . ', 0);"><!-- placeholder --></a>
                </div>'):
            ('  <!-- MP3 is probably in movements -->')
          )
        )
      )
    );
    
    foreach ($performance['movements'] as $key => &$movement) {
      $performance['rows'][] = array(
        array(
          'data' => "", //empty cell for formatting
          'class' => 'atm_movement_empty_cell'
        ),
        array(
          'data' => $movement['name'],
          'colspan' => '4',
          'class' => 'atm_movement_name'
        ),
        array(
          'data' => (
            (!$performance['mp3stat'] && $movement['hasMP3'] === 'true')?
            ('
                <div class="atm_track concertOrder_' . $performance['order'] . '">
                  <a onClick="Drupal.settings.islandora_fjm.play(&quot;piece&quot;, ' . count($js_data['islandora_fjm']['piece']) . ', ' . $key . ');"><!-- placeholder --></a>
                </div>
            '):
            ("<!-- MP3 in performance, or none -->")
          )
        )
      );
    }
    
    if ($performance['mp3stat'] || !empty($performance['movements'])) {
      $playlist = array();
      if ($performance['mp3stat']) {
        $playlist[] = array(
          'url' => t("!base/fedora/repository/!pid/MP3", array(
            '!pid' => $performance['pid'],
            '!base' => $base_url)),
          'title'=> $performance['piece'],
          'now_playing' => theme('fjm_clamor_now_playing', $performance['piece'], $performance['players'])
        );
      }
      else {
        foreach($performance['movements'] as &$movement) {
          if($movement['hasMP3'] === 'true') {
            $playlist[] = array(
              'url' => t("!base/fedora/repository/!pid/MP3", array(
                '!pid' => $movement['pid'],
                '!base' => $base_url)),
              'title'=> t('!piece - !movement', array(
                '!piece' => $performance['piece'],
                '!movement' => $movement['name'])),
              'now_playing' => theme('fjm_clamor_now_playing', $performance['piece'], $performance['players']),
            );
          }
        }
      }
      $js_data['islandora_fjm']['piece'][] = $playlist;
    }

    
    
    $concert['performance'][] = $performance;
    $concert['performance_rows'] = array_merge($concert['performance_rows'], $performance['rows']);
  }
  
  $qp->buildAndExecuteQuery("atm_type_s:\"Archivo de voz\" AND rels_isMemberOf_ms:\"$pid\"",
    array(
      'fl'=> implode(',',
        array(
          "PID",
          "atm_lecture_title_s"
      )),
      'rows' => '1000'
    )
  );
  $lectureResults = array();
  if (count($qp->solrResult->response->docs) > 0) {
    $lectureResults = $qp->solrResult->response->docs;
    $qp->solrResult->response->docs = array();
  }
  
  foreach ($lectureResults as $lecture_result) {
      $lecture = array(
          'pid' => $lecture_result->PID,
          'description' => $lecture_result->atm_lecture_title_s,
      );
      
      $playlist = array(
          array(
              'url' => t("!base/fedora/repository/!pid/MP3", array(
                  '!pid' => $lecture['pid'],
                  '!base' => $base_url)),
              'title' => substr($lecture['description'], 0, 20),
              'now_playing' => '<p>' . $lecture['description'] . '</p>'
          )
      );
      $lecture['row'] = array(
          $lecture['description'],
          array(
              'data' => '
                  <div class="atm_track">
                    <a onClick="Drupal.settings.islandora_fjm.play(&quot;lecture&quot;, ' . count($js_data['islandora_fjm']['lecture']) . ', 0);"><!-- placeholder --></a>
                  </div>
              ',
              'style' => 'float:right;'
          )
      );
      $js_data['islandora_fjm']['lecture'][] = $playlist;
      $concert['lecture'][] = $lecture;
      $concert['lecture_rows'][] = $lecture['row'];
  }
  
  drupal_add_js($js_data, 'setting');
  
  $concert['headers'] = array(
      'performance' => array(
          array(
              'data' => t("Piece")   
          ),
          array(  //To allow indentation "enforcement" for movements...
              'data' => "",
              'width' => '200'
          ),
          array(
              'data' => t("Composer")
          ),
          array(
              'data' => t("Score")
          ), //Score in Fedora Repo
          array(
              'data' => t("Biblio")
          ),   //Score in Library
          array(
              //Playable track...
              'data' => "",
          )
      ),
      'lecture' => array(
          array(
              'data' => t("Description")
          ),
          array(
              'data' => ""
          )
      )
  );
  
  $vars['concert'] = $concert;
  
  $mod_path = drupal_get_path('module', 'fjm_clamor');
  drupal_add_css("$mod_path/css/fjm-clamor-concert.css");
}

/**
 * Assemble the required information given the PID of a score.
 * @param $vars &array
 *   Input/output
 */
function template_preprocess_fjm_clamor_score(&$vars) {
  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrQueryProcessor');
  $qp = new IslandoraSolrQueryProcessor();
  
  $pid = $vars['pid'];
  
  $qp->solrParams = array(
    'fl' => 'atm_score_title_s,atm_score_pdf_b,atm_score_composer_s,atm_score_titn_s',
  );
  $qp->buildAndExecuteQuery("PID:\"$pid\"");
  
  $base = drupal_get_path("module", "islandora_fjm");
  $output = '';

  if (!empty($qp->solrResult->response->docs)) {
    $vars['doc'] = $score_result = $qp->solrResult->response->docs[0];
    dsm($score_result);
    
    $vars['title'] =  $score_result->atm_score_title_s;
    $vars['composer'] = $score_result->atm_score_composer_s;
  
    //FIXME:  This could at least use absolute being passed to the url function or something...
    module_load_include('inc', 'fedora_repository', 'api/fedora_item');
    $item = new Fedora_Item($pid);
    $mods_str = trim($item->get_datastream_dissemination('MODS'));
    
    if ($mods_str) {
      $mods = DOMDocument::loadXML($mods_str);
      if ($mods) {
        $vars['abstract'] = $mods->getElementsByTagName('abstract')->item(0)->nodeValue;
        $vars['notes'] = array();
    
        foreach ($mods->getElementsByTagName('note') as $node) {
          $vars['notes'][] = $node->nodeValue;
        }
      }
    }
    else {
      drupal_set_message(t('Failed to load MODS XML; some information may be missing.'), 'warning');
    }
  }
}

function template_preprocess_fjm_clamor_flexpaper(&$vars) {
  $pid = $vars['pid'];
  $dsid = $vars['dsid'];
  
  if (isset($vars['flexpaper_config']) && !isset($vars['flexpaper_config']['SwfFile'])) {
    $vars['flexpaper_config']['SwfFile'] = url("fedora/repository/$pid/$dsid", array(
      'absolute' => TRUE));
  }
      
  $base = drupal_get_path('module', 'fjm_clamor');
  drupal_add_js("$base/lib/flexpaper/js/flexpaper_flash.js");
  drupal_add_css("$base/css/fjm-clamor-flexpaper.css");
}

function template_preprocess_fjm_clamor_program(&$vars) {
    $pid = $vars['pid'];
    
    $xpath = new DOMXPath(islandora_fjm_perform_solr_q("PID:\"$pid\"", "atm_program_concert_title_s,atm_program_concert_cycle_ms,atm_program_author_s,atm_program_titn_s,atm_program_year_s"));
    $result = $xpath->query("/response/result[@name='response']/doc")->item(0);
    
    $vars['concert'] = array();
    $vars['concert']['title'] = $xpath->evaluate("string(str[@name='atm_program_concert_title_s']/text())", $result);
    $vars['concert']['cycle'] = $xpath->evaluate("string(arr[@name='atm_program_concert_cycle_ms']/str[1]/text())", $result);
    $vars['concert']['year'] = $xpath->evaluate("string(str[@name='atm_program_year_s']/text())", $result);
    
    $modsUrl = url("fedora/repository/$pid/MODS", array(
      'absolute' => TRUE
    ));
    $mods = DOMDocument::loadXML(do_curl($modsUrl));
    if ($mods) {
      $vars['toc'] = $mods->getElementsByTagName('tableOfContents')->item(0)->nodeValue;
      $vars['notes'] = array();

      foreach ($mods->getElementsByTagName('note') as $node) {
          $vars['notes'][] = $node->nodeValue;
      }
    }
}

function template_preprocess_fjm_clamor_person(&$vars) {
  $pid = $vars['pid'];
  
  $eacdoc = new DOMDocument();
  $eac_str = '';
  $result = drupal_http_request(url("fedora/repository/$pid/EAC-CPF", array('absolute' => TRUE)));
  if ((int)($result->code / 100) === 2) {
    $eac_str = $result->data;
  }
  if (empty($eac_str) || !$eacdoc->loadXML($eac_str)) {
    drupal_set_message('asdf');
    return;
  }
  
  $eaccpf = new DOMXPath($eacdoc);

  //XXX: Current live data is not namespaced...  This may cause some issues...
  $eaccpf->registerNamespace('e', $eacdoc->documentElement->namespaceURI);  
  
  $vars['name'] = array(
    'first' => $eaccpf->evaluate('string(/e:eac-cpf/e:cpfDescription/e:identity/e:nameEntry[@localType="primary"]/e:part[@localType="forename"])'),
    'last' => $eaccpf->evaluate('string(/e:eac-cpf/e:cpfDescription/e:identity/e:nameEntry[@localType="primary"]/e:part[@localType="surname"])')
  );
  $vars['date']['birth'] = $eaccpf->evaluate('string(/e:eac-cpf/e:cpfDescription/e:description/e:existDates/e:dateRange/e:fromDate/@standardDate)');
  $vars['date']['death'] = $eaccpf->evaluate('string(/e:eac-cpf/e:cpfDescription/e:description/e:existDates/e:dateRange/e:toDate/@standardDate)');
  
  $vars['biography'] = $eacdoc->saveXML($eaccpf->evaluate('/e:eac-cpf/e:cpfDescription/e:description/e:biogHist[@localType="primary"]/e:p | /e:eac-cpf/e:cpfDescription/e:description/e:biogHist/e:p')->item(0));
  if (strpos($vars['biography'], '&lt;p&gt;')) {
    $vars['biography'] = html_entity_decode($vars['biography']);
  }
  
  $vars['performances'] = array(
    'composed' => array(),
    'played' => array()
  );
  
  //Get a list of all performances in which this person has either composed
  //  the piece being played, or has played in the piece.
  $performances = array(
    'associated' => new DOMXPath(islandora_fjm_perform_solr_q(
      "atm_performance_composer_pid_s:\"$pid\" OR atm_performance_performer_pid_ms:\"$pid\"", 
      array( //fields
        "atm_performance_piece_title_s",
        "atm_performance_year_s",
        "rels_isMemberOf_ms",
        "atm_performance_order_i"
      ),
      array( //otherParams
        'rows' => 1000,
        'sort' => 'atm_performance_piece_title_mlt asc,atm_performance_year_s desc'
      )))
  );
  //Define headers (presumably for a couple of tables), as well as how to get
  //  values for the given column out of the xpath objects created previously,
  //  and what to name them.
  $headers = array(
    'associated' => array(
      array(
        'data' => t('Piece'),
        'sField' => 'title',
        'xpath' => 'str[@name="atm_performance_piece_title_s"]/text()',
        'linkTo' => array(
          'pid' => array(
            'xpath' => 'arr[@name="rels_isMemberOf_ms"]/str[1]/text()'
          ),
          'page' => array(
            'xpath' => 'number(int[@name="atm_performance_order_i"]/text())'
          )
        )
      ),
      
      array(
        'data' => t('Year'),
        'sField' => 'year',
        'xpath' => 'str[@name="atm_performance_year_s"]/text()'
      ),
    )
  );
  
  
  //Perform magic...  
  //  Really, use the two arrays (of arrays) we just defined to build an array
  //  containing the actual data to pass to the template...
  foreach ($performances as $key => $xpath) {
    foreach ($xpath->evaluate("/response/result[@name='response']/doc") as $doc) {
      $temp = array();

      foreach ($headers[$key] as $col) {
        $temp[$col['sField']] = $xpath->evaluate("string(" . $col['xpath'] . ")", $doc);
        
        //Make this column a link, based on...
        if (isset($col['linkTo'])) {
          //... a pid obtained via another xpath
          if (isset($col['linkTo']['pid'])) {
            //If there is a check and it fails, continue to the next 
            //  column without creating the link.
            if (isset($col['linkTo']['pid']['check']) && !$xpath->evaluate("string(" . $col['linkTo']['pid']['check'] . ")", $doc)) {
                $temp[$col['sField']] = $xpath->evaluate("string(" . $col['linkTo']['pid']['failvalue'] . ")", $doc);
                continue;
            }
              
            $temp[$col['sField']] = l(
              $temp[$col['sField']], 
              "fedora/repository/".$xpath->evaluate("string(".$col['linkTo']['pid']['xpath'].")", $doc).(
                (isset($col['linkTo']['page']['xpath'])? '/-/-/' . $xpath->evaluate($col['linkTo']['page']['xpath'], $doc):'')
               ));
          }
        }
      }

      $vars['performances'][$key][] = $temp;
    }
  }
  $vars['performance_headers'] = $headers['associated'];

  //FIXME (minor): Seems like setting/unsetting should be avoidable...  with
  //  a custom "table" theme function?
  //Unset "mystuff" (the stuff I don't want in the markup...)
  $mystuff = array('sField', 'xpath', 'linkTo');
  foreach ($headers['associated'] as $idx => $header) {
    foreach ($header as $key => $value) {
      if (in_array($key, $mystuff)) {
        unset($vars['performance_headers'][$idx][$key]);
      }
    }
  }
}

function template_preprocess_fjm_clamor_imagegallery(&$vars) {
  $pid = $vars['pid'];
  
  $vars['images'] = islandora_fjm_get_related_images_by_pid($pid);  
  drupal_add_css(drupal_get_path('module', 'fjm_clamor') . "/css/fjm-clamor-imagegallery.css", 'module');
}

function fjm_clamor_preprocess_page(&$vars) {
  global $base_url;
  $classes = explode(' ', $vars['body_classes']);
  //Kinda gross looking, due to the manner of argument/path parsing...  Oh well.
  switch (arg(0)) {
    case 'islandora':
      switch (arg(1)) {
        case 'solr':
        switch (arg(2)) {
          case 'search':
            $classes[] = 'page-islandora-solr-search-clamor';
            break;
        }
        break;
      }
      break;
  }
  $vars['classes_array'] = $classes;
  $vars['body_classes'] = implode(' ', $classes);
}

function fjm_clamor_islandora_content_model_forms_get_transforms() {
  return array(
    drupal_get_path('module', 'fjm_clamor') . '/xslt/copy_first_dc.xslt' => t('fjm_clamor--copy DC'),
  );
}

function fjm_clamor_form_fedora_repository_ingest_form_alter(&$form, &$form_state) {
  if ($form_state['storage']['content_model'] == 'atm:concertCModel') {
    $form_state['storage']['pid_namespace'] = 'atm-test';
    $form_state['storage']['parent_relation'] = 'isMemberOf';
  }
  elseif ($form_state['storage']['content_model'] == 'atm:personCModel') {
    $form_state['storage']['pid_namespace'] = 'atm-test';
    $form_state['storage']['parent_relation'] = 'isMemberOfCollection';
    array_unshift($form['#submit'], 'fjm_clamor_person_fix_label');
  }
  elseif ($form_state['storage']['content_model'] == 'atm:scoreCModel') {
    $form_state['storage']['pid_namespace'] = 'atm-test';
    $form_state['storage']['parent_relation'] = 'isMemberOfCollection';
    $form['#submit'][] = 'fjm_clamor_score_submit_add_composer_relation';
    $form['pdf']['#type']['#tree'] = FALSE;
    $form['#submit'][] = 'fjm_clamor_score_add_pdf';
  }
}

function fjm_clamor_form_fedora_repository_edit_qdc_form_alter(&$form, &$form_state) {
  dsm($form, 'qdc edit form');
  dsm($form_state, 'qdc edit form state');
  
  if ($form['content_model_pid']['#value'] == 'atm:scoreCModel') {
    //Get the composer, and fill in the default value.
    if (empty($form['composer']['#default_value'])) {
      module_load_include('inc', 'fedora_repository', 'ObjectHelper');
      $pid = 
      $q = <<<EOQ
PREFIX atm-rel: <http://digital.march.es/atmusica#>
FROM <#ri>
SELECT ?composer
WHERE {
  <info:fedora/$pid> atm-rel:composedBy ?composer .
}
EOQ;
      //XXX: Should only be one...  Anyway...
      foreach (ObjectHelper::performSparqlQuery($q) as $result) {
        $form['initial_composer'] = array(
          '#type' => 'value',
          '#value' => $result['composer'],
        );
        $form['composer']['#default_value'] = $result['composer'];
        break;
      }
    }
    
    //Add in the submit handler to recreate the relation.
    $form['#submit'][] = 'fjm_clamor_score_submit_add_composer_relation';
    
    $form['pdf']['#type']['#tree'] = FALSE;
    $form['pdf']['#description'] = t('This will replace any PDF currently existing on this object.');
    $form['#submit'][] = 'fjm_clamor_score_add_pdf';
  }
  elseif ($form['content_model_pid']['#value'] == 'atm:personCModel') {
    array_unshift($form['#submit'], 'fjm_clamor_person_fix_label');
  }
}
 
/**
 * XXX:  This shouldn't strictly be necessary; however, we don't have provisions
 *   for combining fields in form builder.
 *   
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function fjm_clamor_person_fix_label(&$form, &$form_state) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $item = new Fedora_Item($form_state['values']['pid']);
  $entries = $form_state['values']['cpfdesc']['general_ident']['ident']['name_entries'];
  $primary = array_shift($entries);
  foreach ($entries as $entry) {
    if ($entry['primary'] == 'primary') {
      $primary = $entry;
      break;
    }
  }
  
  form_set_value($form['hidden-name'], t('!last, !first', array(
    '!last' => $primary['surname'],
    '!first' => $primary['forename'],
  )), $form_state);
}

function fjm_clamor_score_submit_add_composer_relation(&$form, &$form_state) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  $composer = $form_state['values']['composer'];
  
  //Get the pid of the created score,
  $composed = $form_state['values']['pid'];
  $item = new Fedora_Item($composed);

  if (isset($form_state['values']['initial_composer']) && $form_state['values']['initial_composer'] != $form_state['values'][composer]) {
    $item->purge_relationships('composedBy', NULL, 'http://digital.march.es/atmusica#');
  }
  
  //and add the author relationship.
  $item->add_relationship('composedBy', $form_state['values']['composer'], 'http://digital.march.es/atmusica#');
}

function fjm_clamor_score_add_pdf(&$form, &$form_state) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  
  $item = new Fedora_Item($form_state['values']['pid']);
  if ($form_state['values']['pdf']) {
    $pdf = $form_state['values']['pdf'];
    
    if (array_key_exists('PDF', $item->datastreams)) {
      $item->modify_datastream($pdf->filepath, 'PDF', 'PDF datastream', 'application/pdf');
    }
    else {
      $item->add_datastream_from_file($pdf->filepath, 'PDF', 'PDF datastream', 'application/pdf');
    }
  }
}